import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Определяем переменную величину

frames = 365
seconds_in_year = 365 * 24 * 60 * 60
years = 20
t = np.linspace(0, years*seconds_in_year, frames)

# Определяем функцию для системы диф. уравнений

def move_func(s, t):
  (x_sun, v_x_sun, y_sun, v_y_sun,
   x_earth, v_x_earth, y_earth, v_y_earth,
   x_jupiter, v_x_jupiter, y_jupiter, v_y_jupiter,
   x_pluto, v_x_pluto, y_pluto, v_y_pluto,
   x_sat, v_x_sat, y_sat, v_y_sat) = s

# Диманика первого тела под влиянием второго и третьего

  dxdt_earth = v_x_earth
  dv_xdt_earth = (- G * m_sun * (x_earth - x_sun) / ((x_earth - x_sun)**2 + (y_earth - y_sun)**2)**1.5)

  dy_dt_earth = v_y_earth
  dv_ydt_earth = (- G * m_sun * (y_earth - y_sun) / ((x_earth - x_sun)**2 + (y_earth - y_sun)**2)**1.5)

  dxdt_jupiter = v_x_jupiter
  dv_xdt_jupiter = (- G * m_sun * (x_jupiter - x_sun) / ((x_jupiter - x_sun)**2 + (y_jupiter - y_sun)**2)**1.5)

  dy_dt_jupiter = v_y_jupiter
  dv_ydt_jupiter = (- G * m_sun * (y_jupiter - y_sun) / ((x_jupiter - x_sun)**2 + (y_jupiter - y_sun)**2)**1.5)

  dxdt_pluto = v_x_pluto
  dv_xdt_pluto = (- G * m_sun * (x_pluto - x_sun) / ((x_pluto - x_sun)**2 + (y_pluto - y_sun)**2)**1.5)

  dy_dt_pluto = v_y_pluto
  dv_ydt_pluto = (- G * m_sun * (y_pluto - y_sun) / ((x_pluto - x_sun)**2 + (y_pluto - y_sun)**2)**1.5)

  dxdt_sat = v_x_sat
  dv_xdt_sat = (- G * m_sun * (x_sat - x_sun) / ((x_sat - x_sun)**2 + (y_sat - y_sun)**2)**1.5
            - G * m_earth * (x_sat - x_earth) / ((x_sat - x_earth)**2 + (y_sat - y_earth)**2)**1.5 
            - G * m_jupiter * (x_sat - x_jupiter) / ((x_sat - x_jupiter)**2 + (y_sat - y_jupiter)**2)**1.5
            - G * m_pluto * (x_sat - x_pluto) / ((x_sat - x_pluto)**2 + (y_sat - y_pluto)**2)**1.5)

  dydt_sat = v_y_sat
  dv_ydt_sat = (- G * m_sun * (y_sat - y_sun) / ((y_sat - y_sun)**2 + (x_sat - x_sun)**2)**1.5
            - G * m_earth * (y_sat - y_earth) / ((y_sat - y_earth)**2 + (x_sat - x_earth)**2)**1.5 
            - G * m_jupiter * (y_sat - y_jupiter) / ((y_sat - y_jupiter)**2 + (x_sat - x_jupiter)**2)**1.5
            - G * m_pluto * (y_sat - y_pluto) / ((y_sat - y_pluto)**2 + (x_sat - x_pluto)**2)**1.5)

  return (dxdt_sun, dv_xdt_sun, dydt_sun, v_ydt_sun,
          dxdt_earth, dv_xdt_earth, dydt_earth, dv_ydt_earth,
          dxdt_jupiter, dv_xdt_jupiter, dydt_jupiter, dv_ydt_jupiter,
          dxdt_pluto, dv_xdt_pluto, dydt_pluto, dv_ydt_pluto,
          dxdt_sat, dv_xdt_sat, dydt_sat, dv_ydt_sat)
 
# Определяем начальные значения и параметры, входящие в систему диф. уравнений

ae = 149 * 10**9

x_sun0 = 0
v_x_sun0 = 0
y_sun0 = 0
v_y_sun0 = 0

x_earth0 = 1 * ae
v_x_earth0 = 0
y_earth0 = 0
v_y_earth0 = 29780

x_jupiter0 = 5.20 * ae
v_x_jupiter0 = 4000
y_jupiter0 = 0
v_y_jupiter0 = 13060

x_pluto0 = 39.5 * ae
v_x_pluto0 = 0
y_pluto0 = 0
v_y_pluto0 = 4700

x_sat0 = 1 * ae
v_x_sat0 = 0
y_sat0 = 0
v_y_sat0 = 1000

s0 = (x_sun0, v_x_sun0, y_sun0, v_y_sun0,
      x_earth0, v_x_earth0, y_earth0, v_y_earth0,
      x_jupiter0, v_x_jupiter0, y_jupiter0, v_y_jupiter0,
      x_pluto0, v_x_pluto0, y_pluto0, v_y_pluto0,
      x_sat0, v_x_sat0, y_sat0, v_y_sat0)

m_sun = 1.98847 * 10**30

m_earth = 3003 * 10**(-9) * m_sun

m_jupiter = 954588 * 10**(-9) * m_sun

m_pluto = 1.303 * 10**22

m_sat = 10**(-15) * m_sun

G = 6.67 * 10**(-11)

# Решаем систему диф. уравнений

sol = odeint(move_func, s0, t)

def solve_func(i, key):
    sol = odeint(move_func, s0, t)
    if key == 'point':
        x1 = sol[i, 0]
        y1 = sol[i, 2]
        x2 = sol[i, 4]
        y2 = sol[i, 6]
        x3 = sol[i, 8]
        y3 = sol[i, 10]
    else:
        x1 = sol[:i, 0]
        y1 = sol[:i, 2]
        x2 = sol[:i, 4]
        y2 = sol[:i, 6]
        x3 = sol[:i, 8]
        y3 = sol[:i, 10]
    return ((x1, y1), (x2, y2), (x3, y3))

# Строим решение в виде графика и анимируем
fig, ax = plt.subplots()

sun, = plt.plot([], [], 'o', color='y')

earth, = plt.plot([], [], 'o', color='orange')

jupiter, = plt.plot([], [], 'o', color='r')

pluto, = plt.plot([], [], 'o', color='r')

sat, = plt.plot([], [], 'o', color='r')

def animate(i):
    sun.set_data(solve_func(i, 'point')[0])

    earth.set_data(solve_func(i, 'point')[1])

    jupiter.set_data(solve_func(i, 'point')[2])

    pluto.set_data(solve_func(i, 'point')[3])

    sat.set_data(solve_func(i, 'point')[4])
    

ani = FuncAnimation(fig,
                    animate,
                    frames=frames,
                    interval=30)

plt.axis('equal')
edge = 20*ae
ax.set_xlim(-edge, edge)
ax.set_ylim(-edge, edge)

plt.show()
