import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Определяем переменную величину

frames = 365
seconds_in_year = 365 * 24 * 60 * 60
years = 1
t = np.linspace(0, years*seconds_in_year, frames)

# 1 - Sun, 2 - Earth, 3 - Jupiter, 4 - Uran, 5 - Sat

# Определяем функцию для системы диф. уравнений

def move_func(s, t):
  (x1, v_x1, y1, v_y1,
   x2, v_x2, y2, v_y2,
   x3, v_x3, y3, v_y3,
   x4, v_x4, y4, v_y4,
   x5, v_x5, y5, v_y5) = s

# Диманика первого тела под влиянием второго и третьего

  dxdt1 = v_x1
  dv_xdt1 = (- G * m2 * (x1 - x2) / ((x1 - x2)**2 + (y1 - y2)**2)**1.5 - G * m3 * (x1 - x3) / ((x1 - x3)**2 + (y1 - y3)**2)**1.5)

  dy_dt1 = v_y1
  dv_ydt1 = (- G * m2 * (y1 - y2) / ((x1 - x2)**2 + (y1 - y2)**2)**1.5 - G * m3 * (y1 - y3) / ((x1 - x3)**2 + (y1 - y3)**2)**1.5)

  dxdt2 = v_x2
  dv_xdt2 = (- G * m1 * (x2 - x1) / ((x2 - x1)**2 + (y2 - y1)**2)**1.5 - G * m3 * (x2 - x3) / ((x2 - x3)**2 + (y2 - y3)**2)**1.5)

  dy_dt2 = v_y2
  dv_ydt2 = (- G * m1 * (y2 - y1) / ((x2 - x1)**2 + (y2 - y1)**2)**1.5 - G * m3 * (y2 - y3) / ((x2 - x3)**2 + (y2 - y3)**2)**1.5)

  dxdt3 = v_x3
  dv_xdt3 = (- G * m1 * (x3 - x1) / ((x3 - x1)**2 + (y3 - y1)**2)**1.5 - G * m2 * (x3 - x2) / ((x3 - x2)**2 + (y3 - y2)**2)**1.5)

  dy_dt3 = v_y3
  dv_ydt3 = (- G * m1 * (y3 - y1) / ((x3 - x1)**2 + (y3 - y1)**2)**1.5 - G * m2 * (y3 - y2) / ((x3 - x2)**2 + (y3 - y2)**2)**1.5)

  dxdt4 = v_x4
  dv_xdt4 = (- G * m1 * (x4 - x1) / ((x4 - x1)**2 + (y4 - y1)**2)**1.5)

  dy_dt4 = v_y4
  dv_ydt4 = (- G * m1 * (y4 - y1) / ((x4 - x1)**2 + (y4 - y1)**2)**1.5)

  dxdt5 = v_x5
  dv_xdt5 = (- G * m1 * (x5 - x1) / ((x5 - x1)**2 + (y5 - y1)**2)**1.5 - G * m2 * (x5 - x2) / ((x5 - x2)**2 + (y5 - y2)**2)**1.5 - G * m3 * (x5 - x3) / ((x5 - x3)**2 + (y5 - y3)**2)**1.5 - G * m4 * (x5 - x4) / ((x5 - x4)**2 + (y5 - y4)**2)**1.5)

  dy_dt5 = v_y5
  dv_ydt5 = (- G * m1 * (y5 - y1) / ((x5 - x1)**2 + (y5 - y1)**2)**1.5 - G * m2 * (y5 - y2) / ((x5 - x2)**2 + (y5 - y2)**2)**1.5 - G * m3 * (y5 - y3) / ((x5 - x3)**2 + (y5 - y3)**2)**1.5 - G * m4 * (y5 - y4) / ((x5 - x4)**2 + (y5 - y4)**2)**1.5)

  return (dxdt1, dv_xdt1, dy_dt1, dv_ydt1,
          dxdt2, dv_xdt2, dy_dt2, dv_ydt2,
          dxdt3, dv_xdt3, dy_dt3, dv_ydt3,
          dxdt4, dv_xdt4, dy_dt4, dv_ydt4,
          dxdt5, dv_xdt5, dy_dt5, dv_ydt5)

# Определяем начальные значения и параметры, входящие в систему диф. уравнений

ae = 149 * 10**9

x10 = 3.407410315588285E+08
v_x10 = 1.392013408197986E+01
y10 = -6.577919684702414E+08
v_y10 = -1.895695816171536E-01

x20 = 1.338492900906352E+11
v_x20 = 1.350129153283614E+04
y20 = -7.163769759594795E+10
v_y20 = 2.618880687437258E+04

x30 = 1.186223314922201E+11
v_x30 = -1.305899672095871E+04
y30 =  7.520888225999837E+11
v_y30 = 2.639473108375633E+03

x40 = -2.081133582161516E+12
v_x40 =  4.466273147488405E+03
y40 = -1.844484818556824E+12
v_y40 = -5.414719208816789E+03

x50 =  1.347515769196121E+11 
v_x50 = 1.584869677771669E+04
y50 = -6.812245462966160E+10
v_y50 = 3.548732097959889E+04


s0 = (x10, v_x10, y10, v_y10,
      x20, v_x20, y20, v_y20,
      x30, v_x30, y30, v_y30,
      x40, v_x40, y40, v_y40,
      x50, v_x50, y50, v_y50)

M = 1.98847 * 10**30
m1 = M

m2 = 3003 * 10 **(-9) * M

m3 = 954588 * 10 ** (-9) * M

m4 = 14.54 * M

m5 = 500

G = 6.67 * 10**(-11)

# Решаем систему диф. уравнений

sol = odeint(move_func, s0, t)

def solve_func(i, key):
    sol = odeint(move_func, s0, t)
    if key == 'point':
        x1 = sol[i, 0]
        y1 = sol[i, 2]
        x2 = sol[i, 4]
        y2 = sol[i, 6]
        x3 = sol[i, 8]
        y3 = sol[i, 10]
        x4 = sol[i, 12]
        y4 = sol[i, 14]
        x5 = sol[i, 16]
        y5 = sol[i, 18]
    else:
        x1 = sol[:i, 0]
        y1 = sol[:i, 2]
        x2 = sol[:i, 4]
        y2 = sol[:i, 6]
        x3 = sol[:i, 8]
        y3 = sol[:i, 10]
        x4 = sol[:i, 12]
        y4 = sol[:i, 14]
        x5 = sol[:i, 16]
        y5 = sol[:i, 18]
    return ((x1, y1), (x2, y2), (x3, y3), (x4, y4), (x5, y5))

# Строим решение в виде графика и анимируем
fig, ax = plt.subplots()

ball1, = plt.plot([], [], 'o', color='gold')
# ball_line1, = plt.plot([], [], '-', color='gold')

ball2, = plt.plot([], [], 'o', color='green')
# ball_line2, = plt.plot([], [], '-', color='orange')

ball3, = plt.plot([], [], 'o', color='orange')
# ball_line3, = plt.plot([], [], '-', color='r')
ball4, = plt.plot([], [], 'o', color='blue')

ball5, = plt.plot([], [], 'o', color='r')


def animate(i):
    ball1.set_data(solve_func(i, 'point')[0])
    # ball_line1.set_data(solve_func(i, 'line')[0])

    ball2.set_data(solve_func(i, 'point')[1])
    # ball_line2.set_data(solve_func(i, 'line')[1])

    ball3.set_data(solve_func(i, 'point')[2])
    # ball_line3.set_data(solve_func(i, 'line')[2])
    ball4.set_data(solve_func(i, 'point')[3])

    ball5.set_data(solve_func(i, 'point')[4])

ani = FuncAnimation(fig,
                    animate,
                    frames=frames,
                    interval=30)

plt.axis('equal')
edge = 25*ae
ax.set_xlim(-edge, edge)
ax.set_ylim(-edge, edge)

# ani.save('task1.gif')
plt.show()
